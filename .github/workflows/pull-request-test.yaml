name: Issue Link Checker

on:
  pull_request:
    types: [edited, synchronize, opened, reopened]

jobs:
  pull-request-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            //core.notice('notice');
            //core.info('info');
            //core.warning('warning');
            //core.debug('debug');
            //core.error('error');
            //core.setFailed('setFailed');
            //return;
            
            const ORG = context.payload.organization.login;
            const REPO = context.payload.repository.name;
            const REPO_BASE_API_URL = `https://api.github.com/repos/${ORG}/${REPO}`;
            const ISSUE_LINK_REGEX = /\b(?:close[sd]?|fix(?:es|ed)?|resolve[sd]?)\b #[0-9]+ /gi;
            
            process.env.GITHUB_STEP_SUMMARY = '### Hello world! ðŸš€';
            
            core.info('Checking for issue links in Pull Request description');
            let matches = context.payload.pull_request.body.match(ISSUE_LINK_REGEX);
            if(!matches){
              core.setFailed('No Issue Link Matches found');
              return;
            } else {
              core.info('   --- Issue Links found');
            }

            core.info('Checking that any found issue links reference the same issue number');
            let linkedIssueNumber;
            matches = matches.map(item => item.replace(/\D/g, '')); //extracting issue numbers
            if(!matches.every((match, index, arr) =>  match === arr[0])){
              core.setFailed('Multiple links referencing different issues');
              return;
            } else {
              linkedIssueNumber = matches[0];
              core.info(`   --- All issue numbers match with issue #${linkedIssueNumber}`);
            }

            core.info('Checking that referenced issue number exists as a valid issue');
            //retrieving all existing issues using gh api
            const response = await fetch(`${REPO_BASE_API_URL}/issues`);
            const issues = await response.json();
            const validIssue = issues.find(issue => issue.number == linkedIssueNumber);
            if(!validIssue){
              core.setFailed(`Referenced issue number #${linkedIssueNumber} is not found in list of issues`);
              return;
            } else {
              core.info(`   --- Referenced issue number #${linkedIssueNumber} found in list of issues`);
            }
            
            core.info('Checking that the referenced issue number has been assigned to the Pull Request creator');            
            if(validIssue.assignees.find(assignee => assignee.login === context.payload.sender.login)){
              core.info(`   --- Pull Request submitter '${context.payload.sender.login}' is confirmed assigned to issue #${linkedIssueNumber}`);
            } else {
              core.setFailed(`Pull Request submitter '${context.payload.sender.login}' is currently not assigned to issue #${linkedIssueNumber}`);
              return;
            }
            
