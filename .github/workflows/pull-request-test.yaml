name: Issue Link Checker

on:
  workflow_dispatch:
  pull_request:
    types: [edited, synchronize, opened, reopened]

jobs:
  pull-request-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            //core.notice('notice');
            //core.info('info');
            //core.warning('warning');
            //core.debug('debug');
            //core.error('error');
            //core.setFailed('setFailed');
            //
            //return;

            const ORG = context.payload.organization.login;
            const REPO = context.payload.repository.name;
            const REPO_BASE_API_URL = `https://api.github.com/repos/${ORG}/${REPO}`;
            const ISSUE_LINK_REGEX = /(Closes|Fixes) #[0-9]+ /g;
            let linkedIssueNumber;

            core.info('Checking for issue links in Pull Request description');
            let matches = context.payload.pull_request.body.match(ISSUE_LINK_REGEX);
            if(!matches){
              core.setFailed('No Issue Link Matches found');
              return;
            }

            core.info('Checking that any found issue links reference the same issue number')
            matches = matches.map(item => item.replace(/\D/g, '')); //extracting issue numbers
            if(!matches.every((match, index, arr) =>  match === arr[0])){
              core.setFailed('Multiple links referencing different issues');
              return;
            } else {
              linkedIssueNumber = match[0];
              core.info(`All issue numbers match with issue ${linkedIssueNumber}`);
            }

            core.info('Checking that referenced issue number exists as a valid issue');
            //retrieving all existing issues using gh api
            const response = await fetch(`${REPO_BASE_API_URL}/issues`)
            const issues = await response.json();
            if(!issues.some(issue => issue.number == linkedIssueNumber)){
              core.setFailed('Referenced issue number is not found in list of issues');
              return;
            }
            
            //core.info('Checking that 
